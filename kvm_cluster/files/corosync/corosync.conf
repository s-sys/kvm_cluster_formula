{%- set cluster = salt['pillar.get']('ha_cluster') -%}
{%- set multicast = salt['pillar.get']('ha_multicast') -%}
# /etc/corosync/corosync.conf file autogenerated by YaST2.
# Manually changed configurations may get lost when reconfigured by YaST2.
totem {
	#Used for mutual node authentication
	crypto_hash: {{ cluster.crypto_hash }}

	#The mode for redundant ring. None is used when only 1 interface specified, otherwise, only active or passive may be choosen
	rrp_mode:	none

	#How many token retransmits should be attempted before forming a new configuration.
	token_retransmits_before_loss_const:	10

	#How long to wait for join messages in membership protocol. in ms
	join:	60

	#The maximum number of messages that may be sent by one processor on receipt of the token.
	max_messages:	20

	#The virtual synchrony filter type used to indentify a primary component. Change with care.
	vsftype:	none

	#HMAC/SHA1 should be used to authenticate all message
	secauth:	on

	#Used for mutual node authentication
	crypto_cipher: {{ cluster.crypto_cipher }}

	#This specifies the name of cluster
	cluster_name: {{ cluster.name }}

	#Specifies version of IP to use for communication. Value can be one of ipv4 or ipv6.
	ip_version:	ipv4

	#Timeout for a token lost. in ms
	token:	5000

	#The only valid version is 2
	version:	2

	#Transport protocol
	transport:	udp

	interface {
		#Network Address to be bind for this interface setting
		bindnetaddr: {{ multicast.bind_interface }}

		#The multicast address to be used
		mcastaddr: {{ multicast.interface }}

		#The ringnumber assigned to this interface setting
		ringnumber:	0

		#The multicast port to be used
		mcastport: {{ multicast.port }}

		#Time-to-live for cluster communication packets
		ttl:	1

	}
	#How long to wait for consensus to be achieved before starting a new round of membership configuration.
	consensus:	6000

	#To make sure the auto-generated nodeid is positive
	clear_node_high_bit:	yes

}
logging {
	#Log to a specified file
	to_logfile:	no

	#Log to be saved in this specified file
	logfile:	/var/log/cluster/corosync.log

	#Log timestamp as well
	timestamp:	on

	#Facility in syslog
	syslog_facility:	daemon

	logger_subsys {
		#Enable debug for this logger.

		debug:	off

		#This specifies the subsystem identity (name) for which logging is specified

		subsys:	QUORUM

	}
	#Log to syslog
	to_syslog:	yes

	#Whether or not turning on the debug information in the log
	debug:	off

	#Log to the standard error output
	to_stderr:	no

	#Logging file line in the source code as well
	fileline:	off

}
quorum {
	#votequorum requires an expected_votes value to function
  {%- set num_nodes = salt['mine.get']('kvm-*', 'network.get_hostname', expr_form='compound') | length() %}
	expected_votes: {{ num_nodes }}

	#Enables two node cluster operations
  {%- if (salt['mine.get']('kvm-*', 'network.get_hostname', expr_form='compound') | length()) == 2 %}
	two_node: 1
  {%- else %}
	two_node: 0
  {%- endif %}

	#Enable and configure quorum subsystem
	provider:	corosync_votequorum

}
